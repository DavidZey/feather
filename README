jojo is a full-on widget based web framework implemented in pure js. 
The main goal is to enable rapid development of powerful RIA-type apps (long running single-page applications).

The proof of concept for jojo was originally written for Aptana's Jaxer server (a js server based on Rhino/Spidermonkey: www.jaxer.org).
The only real bonus to Jaxer over node.js, however, is the presence of E4X (for widget templating) and a fully functional DOM on the server,
which is incredibly useful, but also amounts to quite a bit of overhead (a sandboxed DOM is recreated for every single request mapped to the
application space in Jaxer). 

So, I've decided to expand the scope of the framework a bit more to include generic support for various SSJS 
technology and servers. My thinking currently is that a fully featured robust stack might look like this: 
nginx > node > jaxer && pintura/persevere.

The ngingx layer would serve static content and theoretically reverse proxy to node for dynamic content, which could perhaps
act as a caching layer for parsed widget templates from the jaxer layer and fetch data from the pintura layer. This would allow
node to act in a manner that it enjoys: async orchestrator of events. 

That level of "sharded" stack (don't shoot me for misuse of an emerging buzzword), of course, would be optional, and you could choose to run it all from a node context. 
The point is that jojo aims to be ultimately configurable, with
each framework service being deployable in the most flexible way possible, eventually with some nice pre-configured packages
to go with it.

