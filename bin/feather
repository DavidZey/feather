#!/usr/bin/env node

// feather
// =======

// Requires
// --------

var fs    = require("fs"),
    path  = require("path"),
    spawn = require("child_process").spawn,
    exec  = require("child_process").exec,
    ffs   = require("../lib/util"),
    color = require("colorize"),
    util  = require("util"),
    cli   = require("cli").enable('version').setApp('feather', '0.1'),
    _     = require("underscore"),
    DomResource = require("../lib/dom").DomResource,
    fuzzymap = require("fuzzymap");

// Validate that the environment variable FEATHER_HOME has been been initialized.

if (!process.env.FEATHER_HOME) {
  cli.fatal(color.ansify("The environment variable #white[FEATHER_HOME] is required."));
} else {
  var stat = fs.statSync(process.env.FEATHER_HOME);
  if (!stat.isDirectory()) {
    cli.fatal("The FEATHER_HOME variable location is not a directory.");
  }
}

cli.readline = function (encoding, callback) {
    if (typeof encoding === 'function') {
        callback = encoding;
        encoding = 'utf8';
    }
    var stream = process.openStdin(), 
      data = '';
    stream.setEncoding(encoding);
    var listener = function (chunk) {
        data += chunk;
        if (data.indexOf('\n') >= 0) {
          var endIndex = data.indexOf('\n');
          var output = data.substr(0, endIndex).replace(/(\r)+$/, '');
          // Cleanup the stream.
          stream.removeListener('data', listener);
          stream.pause();
          // Return the output.
          callback(output);
        }
    };
    stream.on('data', listener);
};

var cliOptions = {
    daemonize: ['z', '(run command only) - Daemonize this server so it runs in the background', 'boolean', null],
    debug: ['d', '(run command only) - Starts the app in debug mode (i.e. "node debug")', 'boolean', false],
    "debug-inspector": ['D', '(run command only) - Starts the app in debug mode and hosts node-inspector on port 8888', 'boolean', false],
    env: ['e', '(run command only) - The environment to run in (e.g. dev, prod)', 'string', "dev"],
    loglevel: ['l', '(run command only) - The default logging level to use.  Options are: all, trace, debug, info, warn, error, off', 'string', null],
    outputpath: ['o', '(run command only) - Path to write std output to when running as a daemon', 'path', null],
    pidpath: ['i', '(run command only) - The path of the pid file to use when running as a daemon', 'path', null],
    extras: ['x', '(run command only) - Comma separated list of name:value pairs to append to the environment as additional configuration items. Usage: " feather run -x foo:bar,foo2:bar2"', 'string', null],
    path: ['p', 'The path to the application to apply this command to.  If omitted, defaults to current dir.', 'path', process.cwd()],
    verbose: ['V', 'Verbose output', 'boolean', null],
    format: ['f', '(api-test command only) - Used for test commands to denote the output format.  Valid formats are "tap", "xunit", and "junitxml".', 'string', null],
    testsuite: ['t', '(api-test command only) - Specify the name of a single test suite to run inside of feather/test/unit (omit the file extension)', 'string', null],
    "client-only": ['c', '(create-widget command only) - Indicates that the created widget is a client-side rendered widget (has no .server.js file)', 'boolean', false]
  };
var options = cli.parse(cliOptions, ['run', 'test', 'api-test', 'create-app', 'create-widget', 'create-rest', 'deploy', 'help', 'stats', 'print-cmd', 'lsenv', 'fun']);
if (options.debug) {
  cli.debug("Parsed options are: " + util.inspect(options));
  cli.debug("Command is " + cli.command);
  cli.debug("Args are " + util.inspect(cli.args));
}

// Put regex's in here for commonly misspelled commands.
var fuzzyMap = fuzzymap.defineMap([ 
  { run: [/rui?n/i] }
]);

var commands = {
  run: {
    desc: "Runs a feather app.  If the path option is omitted, the default is attempted.  (See feather --help)",
    usage: "feather [OPTIONS] run",
    cmdOptions: [
      '--daemonize (-' + cliOptions.daemonize[0] + '): ' + cliOptions.daemonize[1],
      '--debug (-' + cliOptions.debug[0] + '): ' + cliOptions.debug[1],
      '--debug-inspector (-' + cliOptions['debug-inspector'][0] + '): ' + cliOptions['debug-inspector'][1],
      '--env (-' + cliOptions.env[0] + '): ' + cliOptions.env[1],
      '--loglevel (-' + cliOptions.loglevel[0] + '): ' + cliOptions.loglevel[1],
      '--outputpath (-' + cliOptions.outputpath[0] + '): ' + cliOptions.outputpath[1],
      '--pidpath (-' + cliOptions.pidpath[0] + '): ' + cliOptions.pidpath[1],
      '--path (-' + cliOptions.path[0] + '): ' + cliOptions.path[1],
      '--verbose (-' + cliOptions.verbose[0] + '): ' + cliOptions.verbose[1]
    ].join('\n  '),
    fn: function() {
      var args = [];
      if (options.debug) {
        args.push('debug');
      } else if (options["debug-inspector"]) {
        args.push('--debug');
      }

      args.push(process.env.FEATHER_HOME + '/lib/app.js');
      
      var appDir = getAppDir();
      args.push(appDir);

      addAdditionalOptions(args);
      
      if (options.printCmd) {
        var cmd = "node";
        _.each(args, function(arg) {
          cmd += " " + arg;
        });
        cli.ok("Run command: " + cmd);
      } else {
        runChild("node", args, appDir);
      }

      if (options["debug-inspector"]) {
        cli.ok("Starting node inspector on port 8888");
        exec("node-inspector --web-port=8888 &");
      }
    }
  },

  apiTest: {
    desc: "Runs the unit tests for the framework itself.",
    usage: "feather [OPTIONS] api-test",
    cmdOptions: [
      '--path (-' + cliOptions.path[0] + '): ' + cliOptions.path[1],
      '--verbose (-' + cliOptions.verbose[0] + '): ' + cliOptions.verbose[1],
      '--format (-' + cliOptions.format[0] + '): ' + cliOptions.format[1],
      '--testsuite (-' + cliOptions.testsuite[0] + '): ' + cliOptions.testsuite[1]
    ].join('\n  '),
    fn: function() {
      var args = [];
      if (options.debug) args.push('debug');
      args.push(process.env.FEATHER_HOME + '/bin/yuitest');
      for (var p in options) { 
        if (p !== 'app') {
          args.push('--'+p);
        }
      }
      var testDir = process.env.FEATHER_HOME+"/test/unit";
      if (options.verbose) cli.info("Getting files in " + testDir);
      var files = [];
      if (options.testsuite) {
        files.push(path.join(testDir, options.testsuite));
      } else {
        files = files.concat(getFiles(testDir));
      }

      // Read the test files
      var i, len, output, ready = true;

      if (files.length > 0){
        for (i=0, len=files.length; i < len; i++){

          if (options.verbose){
            cli.info("Loading " + files[i] + "\n");
          }

          try {
            require(files[i]);
          } catch (ex) {
            cli.error(util.inspect(ex));
            cli.error("No tests loaded from " + files[i] + ".");
            ready = false;
          }
        }
      } else {
        cli.error({message:"No tests to run, exiting.\n", category:"feather.test"});
        ready = false;
      }

      var Y = require("yuitest"),
          testRunner = Y.TestRunner,
          formatter = null;
      
      switch(options.format) {
        case "junitxml":
          if (options.verbose){
            cli.info("Using JUnitXML output format.\n");
          }
          Y.Node.CLI.Format(Y.TestFormat.JUnitXML);
          formatter = Y.TestFormat.JUnitXML;
          break;
        case "xunit":
          if (options.verbose) {
            cli.info("Using XUnit output format.\n");
          }
          Y.Node.CLI.XUnit();
          formatter = Y.TestFormat.XUnit;
          break;
        case "tap":
          if (options.verbose){
            cli.info("Using TAP output format.\n");
          }
          Y.Node.CLI.Format(Y.TestFormat.TAP);
          formatter = Y.TestFormat.TAP;
          break;
        default:
          if (options.verbose){
            cli.info("Using TAP output format.\n");
          }
          Y.Node.CLI.Format(Y.TestFormat.TAP);
          formatter = Y.TestFormat.TAP;
          break;
      }
      // Setup completion handler.
      testRunner.subscribe("complete", function(event) {
        var output = formatter(event.results);
        if (! fs.existsSync(process.env.FEATHER_HOME+"/reports")) {
          fs.mkdirSync(process.env.FEATHER_HOME+"/reports", 0755);
        }
        var outputPath = process.env.FEATHER_HOME + "/reports/test-results.xml";
        fs.writeFileSync(outputPath, output);
      });

      if (ready) {
        cli.info("Running tests...");
        // Start testing
        testRunner.run({
          groups: options.groups ? options.groups.split(",") : null
        });
      }
    }
  },

  test: {
    desc: "Runs the tests for an app.  If the path option is omitted, the default is used.",
    usage: "feather [OPTIONS] test [--format] test/(unit|integration)",
    cmdOptions: [
      '--path (-' + cliOptions.path[0] + '): ' + cliOptions.path[1],
      '--verbose (-' + cliOptions.verbose[0] + '): ' + cliOptions.verbose[1]
    ].join('\n'),
    fn: function() {
      var args = [];
      if (options.debug) args.push('debug');
      var appDir = getAppDir();
      args.push(process.env.FEATHER_HOME + '/bin/yuitest');
      for (var p in options) { 
        if (p !== 'app') {
          args.push('--'+p);
        }
      }
      args.push(appDir);
      Array.prototype.push.apply(args, cli.args);

      if (options.debug) cli.debug("Spawning test process node " + args);
      runChild("node", args, appDir);
    }
  },

  createApp: {
    desc:"Creates a new feather application at the specified directory.  If NAME is omitted, the current directory is assumed, but it will prompt you for confirmation.",
    usage:"feather [OPTIONS] create-app [NAME]",
    cmdOptions: [
      '--path (-' + cliOptions.path[0] + '): ' + cliOptions.path[1],
      '--verbose (-' + cliOptions.verbose[0] + '): ' + cliOptions.verbose[1]
    ].join('\n  '),
    fn: function() {
      var dir = getAppDir(true, true), name;
      if (cli.argc < 1) {
        name = path.basename(dir);
        if (fs.readdirSync(dir).length == 0) {
          cli.info("No app name specified.  Assuming \"" + name + "\".  Is that ok? (y/n)");
          cli.readline(function(data) {
            if (data.toLowerCase()[0] === 'y') {
              createApp(path.dirname(dir), name);
            } else {
              cli.fatal("I can't create an app without a name.  Please specify one next time.");
            }
          });
        } else {
          cli.fatal("No app name specified, and \"" + name + "\" is not empty.");
        }
      } else {
        createApp(dir, cli.args[0]);
      }
    }
  },

  createWidget: {
    desc:"Creates a new widget in a feather app.  If namespace is omitted, the name of the app's directory is assumed.",
    usage:"feather [OPTIONS] create-widget [namespace] widgetName",
    cmdOptions: [
      '--path (-' + cliOptions.path[0] + '): ' + cliOptions.path[1],
      '--verbose (-' + cliOptions.verbose[0] + '): ' + cliOptions.verbose[1],
      '--client-only (-' + cliOptions['client-only'][0] + '): ' + cliOptions['client-only'][1]
    ].join('\n  '),
    fn:function() {
      var namespace, widgetName, appDir = getAppDir();
      if (cli.argc < 1) {
        cli.fatal("No widget name specified");
      } else {
        widgetName = cli.args[0];
        if (cli.argc > 1) {
          namespace = widgetName;
          widgetName = cli.args[1];
        }
      }
      if (!namespace) {
        namespace = path.basename(appDir);
        cli.info("No namespace specified.  Assuming \"" + namespace + "\".  Is that ok? (y/n)");
        cli.readline(function(data) {
          if (data.toLowerCase()[0] === 'y') {
            startCreateWidget(appDir, namespace, widgetName);
          } else {
            cli.fatal("I can't create a widget without knowing the namespace.  Please specify one next time.");
          }
        });
      } else {
        startCreateWidget(appDir, namespace, widgetName);
      }
    }
  },

  createRest: {
    desc:"Creates a new RESTful api source file.",
    usage:"feather [OPTIONS] create-rest restApiName",
    cmdOptions: [
      '--path (-' + cliOptions.path[0] + '): ' + cliOptions.path[1],
      '--verbose (-' + cliOptions.verbose[0] + '): ' + cliOptions.verbose[1]
    ].join('\n  '),
    fn:function() {
      var appDir = getAppDir(),
          name = cli.args[0];
      if (!name) {
        cli.fatal("I can't create a REST api file without a name.  Please specify one next time.  See 'feather help create-rest'.");
      } else {
        var fullPath = path.join(appDir, "rest", name+".js");
        fs.writeFileSync(fullPath, [
          'var feather = require("../lib/feather").getFeather();',
          '',
          'module.exports = {',
          '  "get": {',
          '    "/": function(req, res, cb) {',
          '      ',
          '    }',
          '  }',
          '};'
        ].join('\n'), "utf-8");
        cli.ok(color.ansify("#green[REST api #white["+name+"] created at #white["+fullPath+"].]\n"));
      }
    }
  },

  help: {
    desc:"Displays general help, or help on a specific command.  If you're reading this, you already know that.",
    usage:"feather help <command>",
    cmdOptions: [
      '--path (-' + cliOptions.path[0] + '): ' + cliOptions.path[1],
      '--verbose (-' + cliOptions.verbose[0] + '): ' + cliOptions.verbose[1]
    ].join('\n  '),
    fn: function() {
      if (cli.argc < 1) {
        cli.getUsage();
      } else {
        // Provide help on a specific command.
        var cmd = commands[resolveCmd(cli.args[0])]; 
        var output = [
          color.ansify("#bold[Description:]"),
          "  " + cmd.desc,
          color.ansify("\n#bold[Usage:]"),
          "  " + cmd.usage + "\n",
          color.ansify("#bold[Options:]"),
          "  " + cmd.cmdOptions + "\n"
        ];
        console.log(output.join('\n'));
      }
    }
  },

  deploy: {
    desc: "Not yet implemented: Generates a script used to deploy a feather app.",
    usage: "feather [OPTIONS] deploy",
    cmdOptions: [
      '--deploy-type (upstart | initd)'
    ],
    fn: function() {
      deploy();
    }
  },

  stats: {
    desc: "Calculates stats on the feather app.",
    usage: "feather [OPTIONS] stats",
    cmdOptions: [
      '--path (-' + cliOptions.path[0] + '): ' + cliOptions.path[1],
      '--verbose (-' + cliOptions.verbose[0] + '): ' + cliOptions.verbose[1]
    ].join('\n  '),
    fn: function() {
      stats();
    }
  },

  lsenv: {
    desc: "Lists all of the available environment names in the feather app.",
    usage: "feather [OPTIONS] lsenv",
    cmdOptions: [
      '--path (-' + cliOptions.path[0] + '): ' + cliOptions.path[1],
      '--verbose (-' + cliOptions.verbose[0] + '): ' + cliOptions.verbose[1]
    ].join('\n '),
    fn: lsenv
  },

  fun: {
    desc: "",
    usage: "",
    cmdOptions: [],
    fn: fun
  }
};

commands.printCmd = {
  desc: 'Prints the final command the Run command would execute after all options are parsed.  This is useful to include in start/stop scripts.',
  usage: "feather [OPTIONS] print-cmd",
  cmdOptions: commands.run.cmdOptions,
  fn: function() {
    options.printCmd = true;
    commands.run.fn.call();
  }
};

commands[resolveCmd(cli.command)].fn.call();

function checkResult(result) {
  if (!result.result) {
    cli.fatal(result.err);
  }
}

function resolveCmd(cmd, fuzzymap) {
  return fuzzyMap.map(cmd.replace(/-([a-z])/, function(m) { return m[1].toUpperCase(); }));
}

function getAppDir(createIfNoExist, ignorePublicMissing) {
  var appDir = path.normalize(options.path);
  if (appDir[0] !== '/') {
    appDir = path.resolve(process.cwd(), appDir);
  }

  if (!fs.existsSync(appDir)) {
    if (createIfNoExist) {
      if (!ffs.mkdirpSync(appDir, 0755).result) {
        cli.fatal("Path " + appDir + " does not exist and I couldn't create it.");
      }
    } else {
      cli.fatal("Path " + appDir + " does not exist.");
    }
  }
  if (!fs.statSync(appDir).isDirectory()) {
    cli.fatal(appDir + " is not a directory.");
  }
  if (!ignorePublicMissing && !fs.existsSync(appDir + '/public')) {
    cli.fatal(appDir + " does not appear to be a feather application.");
  }
  return appDir;
}

function addAdditionalOptions(args) {
  if (options.env) {
    args.push("env");
    args.push(options.env);
  }
  if (options.daemonize) {
    args.push("daemonize");
  }
  if (options.outputpath) {
    args.push("outputpath");
    args.push(options.outputpath);
  }
  if (options.pidpath) {
    args.push("pidpath");
    args.push(options.pidpath);
  }
  if (options.loglevel) {
    args.push("loglevel");
    args.push(options.loglevel);
  }
  if (options.extras) {
    args.push('extras');
    args.push(options.extras);
  }
}

function runChild(cmd, args, childCwd) {
  if (!childCwd) {
    childCwd = process.cwd();
  }
  var child = spawn(cmd, args, { 
    cwd: childCwd,
    stdio: 'inherit'
  });
}

function createApp(dir, name) {
  var fullPath = path.join(dir, name);
  checkResult(ffs.mkdirpSync(fullPath));
  checkResult(ffs.mkdirpSync(path.join(fullPath, 'public', 'widgets')));
  checkResult(ffs.mkdirpSync(path.join(fullPath, 'lib')));
  checkResult(ffs.mkdirpSync(path.join(fullPath, 'rest')));
  checkResult(ffs.mkdirpSync(path.join(fullPath, 'node_modules')));
  checkResult(ffs.mkdirpSync(path.join(fullPath, 'conf')));
  fs.writeFileSync(path.join(fullPath, 'lib', 'README.txt'), "Add your own js libraries here.", "utf-8");
  fs.writeFileSync(path.join(fullPath, 'lib', 'feather.js'), [
    '/* This file exists only for the feather framework to expose itself as a "require()\'able" module within your app',
    ' * EXAMPLE (from a file in this same lib folder): ',
    ' *    var feather = require("./feather").getFeather();',
    ' *',
    ' *',
    ' * NOTE: This is a generated file; do not edit or remove this file from your app.',
    ' */',

    'var _feather;',
    'exports.init = function(feather) {',
    '  _feather = feather;',
    '};',

    'exports.getFeather = function() {',
    '  return _feather;',
    '};'
  ].join('\n'), "utf-8");
  fs.writeFileSync(path.join(fullPath, 'app.js'), [
    '/*',
    '// if you implement onInit, you must call cb() when done, so the framework knows when to continue start-up',
    'exports.onInit = function(feather, cb) {',
    '',
    '    if (typeof cb === "function") cb();',
    '};',
    '',
    'exports.onReady = function(feather) {',
    '',
    '};',
    '*/'
  ].join("\n"), "utf-8");
  fs.writeFileSync(path.join(fullPath, 'config.json'), "{}\n");
  fs.writeFileSync(path.join(fullPath, 'public', 'index.feather.html'), "<html>\n<head>\n  <title>Index.feather.html</title>\n  <resources />\n</head>\n<body>\n  <h1>Light as a Feather</h1>\n</body>\n</html>", "utf-8");
  cli.ok(color.ansify(" #green[App #white[" + name + "] created at #white[" + fullPath + "]]\n"));
}

function startCreateWidget(appDir, namespace, widgetName) {
  var fullPath = path.join(appDir, 'public', 'widgets', widgetName);
  if (fs.existsSync(fullPath)) {
    cli.info("Widget \"" + widgetName + "\" already exists!  Replace it? (y/n)");
    cli.readline(function(data) {
      if (data.toLowerCase()[0] === 'y') {
        createWidget(appDir, namespace, widgetName);
      } else {
        cli.ok("Aborting.");
      }
    });
  } else {
    createWidget(appDir, namespace, widgetName);
  }
}

function createWidget(appDir, namespace, widgetPath) {
  var clientOnly = options["client-only"];
  var fullPath = path.join(appDir, 'public', 'widgets', widgetPath);
  ffs.mkdirpSync(fullPath);
  var widgetName = widgetPath.replace(/.*\/([^\/]*)$/, "$1");
  var serverTemplate = [
    'exports.getWidget = function(feather, cb) {',
    '  cb(null, {',
    '    name: "'+namespace+'.'+widgetName+'",',
    '    path: "widgets/'+widgetPath+'/"',
    '  });',
    '};'
  ];

  var clientTemplate = [
    'feather.ns("' + namespace + '");',
    '(function() {',
    '  '+namespace+'.'+widgetName+' = feather.Widget.create({',
    '    name: "'+namespace+'.'+widgetName+'",',
    '    path: "widgets/'+widgetPath+'/",',
    (clientOnly ? '    clientOnly: true,' : null),
    (clientOnly ? '    template: [\n    \n    ].join(""),' : null),
    '    prototype: {',
    '      onInit: function() {',
    '        ',
    '      },',
    '      onReady: function() {',
    '        ',
    '      }',
    '    }',
    '  });',
    '})();'
  ];
  clientTemplate = _.compact(clientTemplate);

  fs.writeFileSync(path.join(fullPath, widgetName+'.client.js'), clientTemplate.join('\n'), "utf-8");
  if (!clientOnly) {
    fs.writeFileSync(path.join(fullPath, widgetName+'.server.js'), serverTemplate.join('\n'), "utf-8");
  }
  fs.writeFileSync(path.join(fullPath, widgetName+'.template.html'), "", "utf-8");
  fs.writeFileSync(path.join(fullPath, widgetName+'.css'), "", "utf-8");
  cli.ok(color.ansify("#green[Widget #white["+widgetName+"] created at #white["+fullPath+"].]\n"));
}

function getFiles(dir){
    var files = [];
    
    try {
        fs.statSync(dir);
    } catch (ex){
        return [];
    }

    function traverse(dir, stack){
        if (options.verbose) cli.info("Traversing " + dir);
        stack.push(dir);
        fs.readdirSync(stack.join("/")).forEach(function(file){
            var path = stack.concat([file]).join("/");
            var stat = fs.statSync(path);
            
            if (file[0] == ".") {
                return;
            } else if (stat.isFile() && /\.js$/.test(file)){
                if (options.verbose) {
                  cli.info("Found test file " + path);
                }
                files.push(path);
            } else if (stat.isDirectory()){
                traverse(file, stack);
            }
        });
        stack.pop();
    }
    
    traverse(dir, []);

    return files;
}

function stats() {
  cli.ok("TODO: Stats");
}

function deploy() {
  cli.ok("TODO: Deploy");
}

function lsenv() {
  // Read config.json and list all properties of environments.  Read contents of conf folder and list json files.
  var envs = [];
  var appDir = getAppDir();
  var defaultConf = appDir + '/config.json';
  if (fs.existsSync(defaultConf)) {
    var defaultConfig = JSON.parse(fs.readFileSync(defaultConf));
    if (defaultConfig.environments) {
      _.each(defaultConfig, function(val, key) { envs.push(key); });
    }
  }
  _.each(_.filter(fs.readdirSync(appDir + '/conf'), function(f) { return path.extname(f) === '.json' }), function(file) {
    envs.push(path.basename(file, '.json'));
  });

  cli.ok(color.ansify("#white[Configured environments: #cyan[#bold[" + envs.join(']], #cyan[#bold[') + ']]]'));
}

function fun() {
  var fun = [    
    
    "                            N+?????????????IIII???D                             ",
    "                        ??I??????????????????I??I??II??                         ",
    "                     ?I?????????????I???IIIIIIIIII?IIIIIIIN                     ",
    "                  ???=+???I?II??II??I?IIIIIIIIIIIIIIIIIIIII7+                   ",
    "                ??=+I??????II????II???IIIIIIIIIIIIIIIIIIIIIIIII8                ",
    "              +==+???I?II?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII7               ",
    "            =+=+???III?I????????III?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIII             ",
    "          N?==??????III?IIN7,,,,+DN?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIII7$           ",
    "         ==~+??????III?IN=.,.,,,,.,,N8IIIIIIIIIIIIIIIIIIIIIIIIIIIIII7I          ",
    "        ?==????I???IIIIIO.,.,,,,,,,.,,M+IIIIIIIIIIIIIIIIIIIIIIIIIIIIII7N        ",
    "       I==??II???I???IIM,,,,,,,,,,,,,,.M?IIIIIIIIIIIIIIIIIIIIIIIIIIIII778       ",
    "      ?==?????III???IIIN,,,,,,,,,,,,,,,,MIIIIII$MNNM$IIIIIIIIIIIIIIIIIII78      ",
    "     I==I???II?II???IIIN.,,,.DNNN,,,,,,,D?IIIIN..,,,,M?IIIIIIIIIIIIIIII777D     ",
    "    I=+????IIIIIII?IIIIM.,,,NNND,D,,,,,,~8II7Z,,,.,,,,NIIIIIIIIIIIIIII7II77     ",
    "   ???????IIIIIIIIIIIIIOI,,:NNNNNZ,,,,,,:NI?M.,,,:.,,.,MIIIIIIIIIIIIIIIII777    ",
    "   ?+I????IIIIIIIIIIIII?M,,,NNNNM,,,,,,,D$I?M,,+M:N,,,,N?IIIIIIIIIIIIII7I7I77   ",
    "  I????I?IIIIIIIIIIIIIII?N:.:DN7,,,,,,,,M?IIM,,MNMN,,,:MIIIIIIIIIIIIIIIIIII77   ",
    " ZI????IIIIIIIIIIIIIIIIIIIMD~,,,,,,:,,=M?IIIDN,NNNN.,,M$IIIIIIIIIIIIIIIII7I77I  ",
    " I??II?IIIIIIIIIIIIIIIIIII??MND:::,~8NN?IIII?MN:,,,::NMIIIIIIIIIIIIIIIIIIIII77  ",
    " I?IIII?IIIIIIIIIIIIIIIIIIIIII?$NND$?IIIIIIIIIONO~~8M8IIIIIIIIIIIIIIIIIIIII777I ",
    "II????IIIIIIIIIIIIIIIIIIIIIIIIIIII?IIIIIIIIIIIIIII?IIIIIIIIIIIIIIIIIIIIIIIII777 ",
    "I???IIIIIIIIIIIII7?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII7I777 ",
    "II?IIIIIIII???$N ?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?77N",
    "I?IIIIIIIIIIII?N?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~+7O",
    "IIIII?IIIIIIIIINDIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIDN$IIIIIIIIIIII7I==7I",
    "IIIIIIIIIIIIIII NIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?MNII7IIIIIIIIII7I~=7?",
    "7IIIIIIIIIIIIIIIN?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIMNI7IIIIIIIIIIII7I~=7O",
    "7IIIIIIIIIIIIIIINNIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?NMIIIIIIIIIIIIIII7I==7N",
    "7IIIIIIIIIIIIIIIIN7IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIMMIIIIIIIIIIIIIIIII7I=+$ ",
    "IIIIIIIIIIIIIIIII7NIIIIIIIIIIIIIIIIIIIIIIII?IIIIIIIOMMNIIIIIIIIIIIIIIIIII7I+~77 ",
    "N7IIIIIIIIIIIIIIIION?IIIIIIIIIIIIIIIIIIMNNN8OOZZ8M?IIIIIIIIIIIIIIIIIIIII777==7I ",
    " 7IIIIIIIIIIIIIIIII7NOIIIIIIIIIIIIII8M8$ZZNNZZZZZZNMIIIIIIIIIIIIIIIIIII7I7I=+7  ",
    " I7IIIIIIIIIIIIIIIIIIMM?IIIIIIII?$MNZZZZZZZMZZZZZZZZN?IIIIIIIIIIIIIIIIII77+=7I  ",
    "  7IIIIIIIIIIIIIIIIIII?DMNMNNMMMN78DZZZZZZZZNZZZZZZZZMOIIIIIIIIIIIIIIII777=?$   ",
    "  O7IIIIIIIIIIIIIIIIIIIIIII????IIIINZZZZZZZZ$N$$ZZZ$ZZM87IIIIIIIIIIIII7I7==7$   ",
    "   7IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIINZZZZZZZZZZZZ$$ZZ$$ZMIIIIIIIIIIIII777?=7$    ",
    "    7IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIMZZZZZZZZ$DZZZ$$Z$$ZMIIIIIIIIIIII777?7$     ",
    "     77IIIIIIIIIIIIIIIIIIIIIIIIIIIIIMZZZZZZ$ZZZZZ$$$$$$$NIIIIIIIIIII777777N     ",
    "      77IIIIIIIIIIIIIIIIIIIIIIIIIIIIIM$Z$Z$$Z$$$$$$$$$$$N$IIIIIIII777777$D      ",
    "       777I7IIIIIIIIIIIIIIIIIIIIIIIIIM8$$$$$$$$$$$$$$$$$M?II77III777777$D       ",
    "        777I7IIIIIIIIIIIIIIIIIIIIIIIIIMO$$$$$$$$$$$$$$$NOIIIIIII777777$D        ",
    "         I777IIIIIIIIIIIIIIIIIIIIIIIIIIMN$$$$$$$$$$$$DMI7I7III777777$7          ",
    "          8$77II7IIIIIIIIIIIIIIIIIIIIIII?NM8ZZZZONMM$IIII7II7777777$O           ",
    "            $7777IIIIIIIIIIIIIIIIIIIIIIIII7??????I77II7III7777777$7             ",
    "              $77777I777IIIIIIIIIIIIIIIIIIIIIIIII77I77777777777$7               ",
    "               N77777777IIIIIIIIIIIIIIIIIIIIIIIIIII7777777777$$D                ",
    "                  77777777777II7III7IIIIIIIII7I777777777777$7                   ",
    "                    N77777777777777777I77777777777777777$$                      ",
    "                        7$$7777777777777777777777777777                         ",
    "                            Z7$$$777777777777$$$$7$                             ",
    "                                   N8Z$77$8N                                    ",
    "         \"It is fun to have fun but you have to know how.\" - Dr. Seuss\n"
  ].join('\n');

  console.log(fun);
}